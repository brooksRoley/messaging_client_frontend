{"ast":null,"code":"var _jsxFileName = \"/Users/zero/Desktop/messaging_client_frontend/src/components/Conversation.jsx\";\nimport React from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { BASE_URL, QUERY_PARAMS } from './constants';\nimport uuidv1 from 'uuid/v1'; // View the messages of a selected conversation in-order\n// Incoming vs outgoing messages must be visually distinct\n// Compose a new message and have it appear in the interface\n// Refreshing the page should remain viewing that conversation when the page reloads\n\nexport default class Conversation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleResponseField = e => {\n      this.setState({\n        newMessage: e.target.value\n      });\n    };\n\n    this.handleResponseSubmit = e => {\n      e.preventDefault();\n      let _this$state = this.state,\n          messages = _this$state.messages,\n          newMessage = _this$state.newMessage;\n\n      if (newMessage !== '') {\n        messages.push({\n          uuid: uuidv1(),\n          // ⇨ '3b99e3e0-7598-11e8-90be-95472fb3ecbd'\n          body: newMessage,\n          direction: \"outgoing\",\n          created_at: new Date().toISOString()\n        });\n        this.setState({\n          messages,\n          newMessage: ''\n        });\n      }\n    };\n\n    const uuid = _.get(props, ['match', 'params', 'convoId'], \"default\");\n\n    this.state = {\n      uuid,\n      messages: [],\n      newMessage: ''\n    };\n  }\n\n  componentDidMount() {\n    let uuid = this.state.uuid;\n    fetch(\"\".concat(BASE_URL, \"/conversations/\").concat(uuid).concat(QUERY_PARAMS)).then(response => {\n      return response.json();\n    }).then(conversation => {\n      let data = conversation.data || {};\n      let messages = data.messages || [];\n      this.setState({\n        messages\n      });\n    });\n  }\n\n  render() {\n    let _this$state2 = this.state,\n        messages = _this$state2.messages,\n        uuid = _this$state2.uuid,\n        newMessage = _this$state2.newMessage;\n\n    if (!!!uuid) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Incorrect Conversation ID\");\n    }\n\n    if (messages.length === 0) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"No message history; Loading\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"conversation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Back\")), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Conversation:\"), messages.map(m => {\n      return React.createElement(\"div\", {\n        key: m.uuid,\n        className: m.direction === 'incoming' ? 'incoming' : 'outgoing',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, m.body);\n    })), React.createElement(\"form\", {\n      onSubmit: this.handleResponseSubmit,\n      className: \"response-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: newMessage,\n      onChange: this.handleResponseField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Send\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/zero/Desktop/messaging_client_frontend/src/components/Conversation.jsx"],"names":["React","_","Link","BASE_URL","QUERY_PARAMS","uuidv1","Conversation","Component","constructor","props","handleResponseField","e","setState","newMessage","target","value","handleResponseSubmit","preventDefault","state","messages","push","uuid","body","direction","created_at","Date","toISOString","get","componentDidMount","fetch","then","response","json","conversation","data","render","length","map","m"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom'\nimport { BASE_URL, QUERY_PARAMS } from './constants'\nimport uuidv1 from 'uuid/v1';\n\n// View the messages of a selected conversation in-order\n// Incoming vs outgoing messages must be visually distinct\n// Compose a new message and have it appear in the interface\n// Refreshing the page should remain viewing that conversation when the page reloads\n\nexport default class Conversation extends React.Component {\n\n  constructor(props) {\n    super(props)\n    const uuid = _.get(props, ['match', 'params', 'convoId'], \"default\");\n    this.state = {\n      uuid,\n      messages: [],\n      newMessage: '',\n    }\n  }\n\n  componentDidMount() {\n    let { uuid } = this.state;\n    fetch(`${BASE_URL}/conversations/${uuid}${QUERY_PARAMS}`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((conversation) => {\n        let data = conversation.data || {};\n        let messages = data.messages || [];\n        this.setState({ messages });\n      });\n  }\n\n  handleResponseField = (e) => {\n    this.setState({newMessage: e.target.value});\n  }\n\n  handleResponseSubmit = (e) => {\n    e.preventDefault();\n    let {messages, newMessage} =  this.state\n\n    if(newMessage !== ''){\n      messages.push({\n        uuid: uuidv1(), // ⇨ '3b99e3e0-7598-11e8-90be-95472fb3ecbd'\n        body: newMessage,\n        direction: \"outgoing\",\n        created_at: new Date().toISOString(),\n      })\n      this.setState({ messages, newMessage: '' });\n    }\n  }\n\n  render() {\n    let { messages, uuid, newMessage } = this.state;\n    if(!!!uuid){\n      return <p>Incorrect Conversation ID</p>\n    }\n    if(messages.length === 0){\n      return <p>No message history; Loading</p>;\n    }\n\n    return (\n      <div>\n        <div className=\"conversation\">\n\n          <button>\n            <Link to='/'>Back</Link>\n          </button>\n\n          <h2>Conversation:</h2>\n          {messages.map(m => {\n            return <div key={m.uuid} className={ m.direction === 'incoming' ? 'incoming' : 'outgoing' }>{m.body}</div>;\n          })}\n\n        </div>\n        <form  onSubmit={this.handleResponseSubmit} className=\"response-field\">\n          <input type=\"text\"\n                 value={newMessage}\n                 onChange={this.handleResponseField}\n          />\n          <input type=\"submit\" value=\"Send\" />\n        </form>\n      </div>\n    )\n  }\n\n}"]},"metadata":{},"sourceType":"module"}