{"ast":null,"code":"var _jsxFileName = \"/Users/zero/Desktop/messaging_client_frontend/src/components/MessagingClient.jsx\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { BASE_URL, QUERY_PARAMS } from './constants'; // View the list of conversations with friends\n// Conversations are displayed in descending order of their last timestamp\n// Display a preview of each conversation (name, unread count, and last message time)\n\nexport default class MessagingClient extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        nameFilter: event.target.value\n      });\n    };\n\n    this.state = {\n      nameFilter: '',\n      conversations: []\n    };\n  }\n\n  componentDidMount() {\n    // returns a list of conversations which include name of the other party, and an ID.\n    // You can use this ID to fetch the messages of a given conversation\n    fetch(\"\".concat(BASE_URL, \"/conversations\").concat(QUERY_PARAMS)).then(response => {\n      return response.json();\n    }).then(response => {\n      const conversations = response.data.sort((a, b) => {\n        return new Date(b.last_message.created_at) - new Date(a.last_message.created_at);\n      });\n      this.setState({\n        conversations\n      });\n    });\n  }\n\n  render() {\n    let _this$state = this.state,\n        conversations = _this$state.conversations,\n        nameFilter = _this$state.nameFilter;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"friend-filter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Friend Filter:\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: nameFilter,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"conversation-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, conversations.filter(convo => convo.name.match(new RegExp(\"\".concat(nameFilter), 'i', 'g'))).map(convo => {\n      let name = convo.name,\n          unread = convo.unread,\n          last_message = convo.last_message,\n          uuid = convo.uuid;\n      let created_at = last_message.created_at,\n          direction = last_message.direction;\n      return React.createElement(\"div\", {\n        key: uuid,\n        className: direction === 'incoming' ? 'respondCTO' : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: {\n          pathname: \"/conversation/\".concat(uuid)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message-preview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"With: \", name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Unread: \", unread), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Last Message: \", new Date(created_at).toString()))));\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/zero/Desktop/messaging_client_frontend/src/components/MessagingClient.jsx"],"names":["React","Link","BASE_URL","QUERY_PARAMS","MessagingClient","Component","constructor","props","handleChange","event","setState","nameFilter","target","value","state","conversations","componentDidMount","fetch","then","response","json","data","sort","a","b","Date","last_message","created_at","render","filter","convo","name","match","RegExp","map","unread","uuid","direction","pathname","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,aAAvC,C,CAEA;AACA;AACA;;AAEA,eAAe,MAAMC,eAAN,SAA8BJ,KAAK,CAACK,SAApC,CAA8C;AAE3DC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAuBlBC,YAvBkB,GAuBFC,KAAD,IAAW;AACxB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,UAAU,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAA3B,OAAd;AACD,KAzBiB;;AAEhB,SAAKC,KAAL,GAAa;AACXH,MAAAA,UAAU,EAAE,EADD;AAEXI,MAAAA,aAAa,EAAE;AAFJ,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB;AACA;AACAC,IAAAA,KAAK,WAAIf,QAAJ,2BAA6BC,YAA7B,EAAL,CACGe,IADH,CACSC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHH,EAIGF,IAJH,CAISC,QAAD,IAAc;AAClB,YAAMJ,aAAa,GAAGI,QAAQ,CAACE,IAAT,CAAcC,IAAd,CAAmB,CAACC,CAAD,EAAGC,CAAH,KAAS;AAChD,eAAO,IAAIC,IAAJ,CAASD,CAAC,CAACE,YAAF,CAAeC,UAAxB,IAAsC,IAAIF,IAAJ,CAASF,CAAC,CAACG,YAAF,CAAeC,UAAxB,CAA7C;AACD,OAFqB,CAAtB;AAGA,WAAKjB,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd;AACD,KATH;AAUD;;AAMDa,EAAAA,MAAM,GAAE;AAAA,sBAC4B,KAAKd,KADjC;AAAA,QACDC,aADC,eACDA,aADC;AAAA,QACcJ,UADd,eACcA,UADd;AAGN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEA,UAA1B;AAAsC,MAAA,QAAQ,EAAE,KAAKH,YAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADF,EAQE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGO,aAAa,CAACc,MAAd,CAAqBC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,KAAX,CAAiB,IAAIC,MAAJ,WAActB,UAAd,GAA4B,GAA5B,EAAiC,GAAjC,CAAjB,CAA9B,EAAuFuB,GAAvF,CAA2FJ,KAAK,IAAI;AAAA,UAC7FC,IAD6F,GACxDD,KADwD,CAC7FC,IAD6F;AAAA,UACvFI,MADuF,GACxDL,KADwD,CACvFK,MADuF;AAAA,UAC/ET,YAD+E,GACxDI,KADwD,CAC/EJ,YAD+E;AAAA,UACjEU,IADiE,GACxDN,KADwD,CACjEM,IADiE;AAAA,UAE7FT,UAF6F,GAEnED,YAFmE,CAE7FC,UAF6F;AAAA,UAEjFU,SAFiF,GAEnEX,YAFmE,CAEjFW,SAFiF;AAInG,aACE;AAAK,QAAA,GAAG,EAAED,IAAV;AAAgB,QAAA,SAAS,EAAEC,SAAS,KAAG,UAAZ,GAAyB,YAAzB,GAAuC,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAE;AAAEC,UAAAA,QAAQ,0BAAmBF,IAAnB;AAAV,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACSL,IADT,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACWI,MADX,CAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACiB,IAAIV,IAAJ,CAASE,UAAT,EAAqBY,QAArB,EADjB,CAPF,CADF,CADF,CADF;AAiBD,KArBA,CADH,CARF,CADF;AAmCD;;AAnE0D","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { BASE_URL, QUERY_PARAMS } from './constants'\n\n// View the list of conversations with friends\n// Conversations are displayed in descending order of their last timestamp\n// Display a preview of each conversation (name, unread count, and last message time)\n\nexport default class MessagingClient extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      nameFilter: '',\n      conversations: [],\n    }\n  }\n\n  componentDidMount(){\n    // returns a list of conversations which include name of the other party, and an ID.\n    // You can use this ID to fetch the messages of a given conversation\n    fetch(`${BASE_URL}/conversations${QUERY_PARAMS}`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        const conversations = response.data.sort((a,b) => {\n          return new Date(b.last_message.created_at) - new Date(a.last_message.created_at);\n        });\n        this.setState({ conversations });\n      });\n  }\n\n  handleChange = (event) => {\n    this.setState({ nameFilter: event.target.value });\n  }\n\n  render(){\n    let {conversations, nameFilter} = this.state;\n\n    return (\n      <div>\n        <form className=\"friend-filter\">\n          <label>\n            <h4>Friend Filter:</h4>\n            <input type=\"text\" value={nameFilter} onChange={this.handleChange} />\n          </label>\n        </form>\n\n        <div className=\"conversation-list\">\n          {conversations.filter(convo => convo.name.match(new RegExp(`${nameFilter}`, 'i', 'g'))).map(convo => {\n            let { name, unread, last_message, uuid } = convo;\n            let { created_at, direction } = last_message;\n\n            return (\n              <div key={uuid} className={direction==='incoming' ? 'respondCTO': ''}>\n                <Link to={{ pathname: `/conversation/${uuid}` }}>\n                  <div className=\"message-preview\">\n                    <p>\n                      With: {name}\n                    </p>\n                    <p>\n                      Unread: {unread}\n                    </p>\n                    <h5>\n                      Last Message: {new Date(created_at).toString()}\n                    </h5>\n                  </div>\n                </Link>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}